
Vending-Machine-As-Time-Machine-With-SEOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08002604  08002604  00012604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027dc  080027dc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080027dc  080027dc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027dc  080027dc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027dc  080027dc  000127dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027e0  080027e0  000127e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080027e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000010  080027f4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080027f4  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1c0  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a06  00000000  00000000  0002b1f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b48  00000000  00000000  0002cc00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a70  00000000  00000000  0002d748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014855  00000000  00000000  0002e1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000082de  00000000  00000000  00042a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071c76  00000000  00000000  0004aceb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bc961  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e60  00000000  00000000  000bc9dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080025ec 	.word	0x080025ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080025ec 	.word	0x080025ec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fd4a 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f80e 	bl	8000184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f8c8 	bl	80002fc <MX_GPIO_Init>
  MX_TIM2_Init();
 800016c:	f000 f850 	bl	8000210 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f89a 	bl	80002a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Task_Init();
 8000174:	f000 fa3c 	bl	80005f0 <Task_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000178:	4801      	ldr	r0, [pc, #4]	; (8000180 <main+0x24>)
 800017a:	f001 fc7e 	bl	8001a7a <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800017e:	e7fe      	b.n	800017e <main+0x22>
 8000180:	20000070 	.word	0x20000070

08000184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b090      	sub	sp, #64	; 0x40
 8000188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018a:	f107 0318 	add.w	r3, r7, #24
 800018e:	2228      	movs	r2, #40	; 0x28
 8000190:	2100      	movs	r1, #0
 8000192:	4618      	mov	r0, r3
 8000194:	f002 fa22 	bl	80025dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000198:	1d3b      	adds	r3, r7, #4
 800019a:	2200      	movs	r2, #0
 800019c:	601a      	str	r2, [r3, #0]
 800019e:	605a      	str	r2, [r3, #4]
 80001a0:	609a      	str	r2, [r3, #8]
 80001a2:	60da      	str	r2, [r3, #12]
 80001a4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a6:	2301      	movs	r3, #1
 80001a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b0:	2300      	movs	r3, #0
 80001b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b4:	2301      	movs	r3, #1
 80001b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b8:	2302      	movs	r3, #2
 80001ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c8:	f107 0318 	add.w	r3, r7, #24
 80001cc:	4618      	mov	r0, r3
 80001ce:	f001 f80d 	bl	80011ec <HAL_RCC_OscConfig>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d001      	beq.n	80001dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001d8:	f000 f8f8 	bl	80003cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001dc:	230f      	movs	r3, #15
 80001de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e0:	2302      	movs	r3, #2
 80001e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f2:	1d3b      	adds	r3, r7, #4
 80001f4:	2102      	movs	r1, #2
 80001f6:	4618      	mov	r0, r3
 80001f8:	f001 fa78 	bl	80016ec <HAL_RCC_ClockConfig>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d001      	beq.n	8000206 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000202:	f000 f8e3 	bl	80003cc <Error_Handler>
  }
}
 8000206:	bf00      	nop
 8000208:	3740      	adds	r7, #64	; 0x40
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
	...

08000210 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000216:	f107 0308 	add.w	r3, r7, #8
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000224:	463b      	mov	r3, r7
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800022c:	4b1d      	ldr	r3, [pc, #116]	; (80002a4 <MX_TIM2_Init+0x94>)
 800022e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000232:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000-1;
 8000234:	4b1b      	ldr	r3, [pc, #108]	; (80002a4 <MX_TIM2_Init+0x94>)
 8000236:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800023a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800023c:	4b19      	ldr	r3, [pc, #100]	; (80002a4 <MX_TIM2_Init+0x94>)
 800023e:	2200      	movs	r2, #0
 8000240:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2-1;
 8000242:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <MX_TIM2_Init+0x94>)
 8000244:	2201      	movs	r2, #1
 8000246:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000248:	4b16      	ldr	r3, [pc, #88]	; (80002a4 <MX_TIM2_Init+0x94>)
 800024a:	2200      	movs	r2, #0
 800024c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800024e:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <MX_TIM2_Init+0x94>)
 8000250:	2200      	movs	r2, #0
 8000252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000254:	4813      	ldr	r0, [pc, #76]	; (80002a4 <MX_TIM2_Init+0x94>)
 8000256:	f001 fbe5 	bl	8001a24 <HAL_TIM_Base_Init>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000260:	f000 f8b4 	bl	80003cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000268:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800026a:	f107 0308 	add.w	r3, r7, #8
 800026e:	4619      	mov	r1, r3
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <MX_TIM2_Init+0x94>)
 8000272:	f001 fd2d 	bl	8001cd0 <HAL_TIM_ConfigClockSource>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800027c:	f000 f8a6 	bl	80003cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000280:	2300      	movs	r3, #0
 8000282:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000284:	2300      	movs	r3, #0
 8000286:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000288:	463b      	mov	r3, r7
 800028a:	4619      	mov	r1, r3
 800028c:	4805      	ldr	r0, [pc, #20]	; (80002a4 <MX_TIM2_Init+0x94>)
 800028e:	f001 fefb 	bl	8002088 <HAL_TIMEx_MasterConfigSynchronization>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000298:	f000 f898 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800029c:	bf00      	nop
 800029e:	3718      	adds	r7, #24
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000070 	.word	0x20000070

080002a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002ac:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002ae:	4a12      	ldr	r2, [pc, #72]	; (80002f8 <MX_USART1_UART_Init+0x50>)
 80002b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002b2:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002cc:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002ce:	220c      	movs	r2, #12
 80002d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002d2:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002da:	2200      	movs	r2, #0
 80002dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002de:	4805      	ldr	r0, [pc, #20]	; (80002f4 <MX_USART1_UART_Init+0x4c>)
 80002e0:	f001 ff28 	bl	8002134 <HAL_UART_Init>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002ea:	f000 f86f 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000030 	.word	0x20000030
 80002f8:	40013800 	.word	0x40013800

080002fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b088      	sub	sp, #32
 8000300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000302:	f107 0310 	add.w	r3, r7, #16
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000310:	4b2b      	ldr	r3, [pc, #172]	; (80003c0 <MX_GPIO_Init+0xc4>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a2a      	ldr	r2, [pc, #168]	; (80003c0 <MX_GPIO_Init+0xc4>)
 8000316:	f043 0320 	orr.w	r3, r3, #32
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b28      	ldr	r3, [pc, #160]	; (80003c0 <MX_GPIO_Init+0xc4>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0320 	and.w	r3, r3, #32
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000328:	4b25      	ldr	r3, [pc, #148]	; (80003c0 <MX_GPIO_Init+0xc4>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a24      	ldr	r2, [pc, #144]	; (80003c0 <MX_GPIO_Init+0xc4>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <MX_GPIO_Init+0xc4>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0304 	and.w	r3, r3, #4
 800033c:	60bb      	str	r3, [r7, #8]
 800033e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000340:	4b1f      	ldr	r3, [pc, #124]	; (80003c0 <MX_GPIO_Init+0xc4>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a1e      	ldr	r2, [pc, #120]	; (80003c0 <MX_GPIO_Init+0xc4>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b1c      	ldr	r3, [pc, #112]	; (80003c0 <MX_GPIO_Init+0xc4>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0308 	and.w	r3, r3, #8
 8000354:	607b      	str	r3, [r7, #4]
 8000356:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800035e:	4819      	ldr	r0, [pc, #100]	; (80003c4 <MX_GPIO_Init+0xc8>)
 8000360:	f000 ff2b 	bl	80011ba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB500_Pin PB1000_Pin PBPROSES_Pin PBBATAL_Pin */
  GPIO_InitStruct.Pin = PB500_Pin|PB1000_Pin|PBPROSES_Pin|PBBATAL_Pin;
 8000364:	23f0      	movs	r3, #240	; 0xf0
 8000366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800036c:	2301      	movs	r3, #1
 800036e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000370:	f107 0310 	add.w	r3, r7, #16
 8000374:	4619      	mov	r1, r3
 8000376:	4814      	ldr	r0, [pc, #80]	; (80003c8 <MX_GPIO_Init+0xcc>)
 8000378:	f000 fdae 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 800037c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000382:	2301      	movs	r3, #1
 8000384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000386:	2300      	movs	r3, #0
 8000388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038a:	2302      	movs	r3, #2
 800038c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800038e:	f107 0310 	add.w	r3, r7, #16
 8000392:	4619      	mov	r1, r3
 8000394:	480b      	ldr	r0, [pc, #44]	; (80003c4 <MX_GPIO_Init+0xc8>)
 8000396:	f000 fd9f 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800039a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800039e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a0:	2301      	movs	r3, #1
 80003a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003a4:	2301      	movs	r3, #1
 80003a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a8:	2302      	movs	r3, #2
 80003aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ac:	f107 0310 	add.w	r3, r7, #16
 80003b0:	4619      	mov	r1, r3
 80003b2:	4804      	ldr	r0, [pc, #16]	; (80003c4 <MX_GPIO_Init+0xc8>)
 80003b4:	f000 fd90 	bl	8000ed8 <HAL_GPIO_Init>

}
 80003b8:	bf00      	nop
 80003ba:	3720      	adds	r7, #32
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40010c00 	.word	0x40010c00
 80003c8:	40010800 	.word	0x40010800

080003cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr

080003d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003de:	4b15      	ldr	r3, [pc, #84]	; (8000434 <HAL_MspInit+0x5c>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	4a14      	ldr	r2, [pc, #80]	; (8000434 <HAL_MspInit+0x5c>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6193      	str	r3, [r2, #24]
 80003ea:	4b12      	ldr	r3, [pc, #72]	; (8000434 <HAL_MspInit+0x5c>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f6:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <HAL_MspInit+0x5c>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	4a0e      	ldr	r2, [pc, #56]	; (8000434 <HAL_MspInit+0x5c>)
 80003fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000400:	61d3      	str	r3, [r2, #28]
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <HAL_MspInit+0x5c>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800040e:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <HAL_MspInit+0x60>)
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <HAL_MspInit+0x60>)
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042a:	bf00      	nop
 800042c:	3714      	adds	r7, #20
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	40021000 	.word	0x40021000
 8000438:	40010000 	.word	0x40010000

0800043c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800044c:	d113      	bne.n	8000476 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <HAL_TIM_Base_MspInit+0x44>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	4a0b      	ldr	r2, [pc, #44]	; (8000480 <HAL_TIM_Base_MspInit+0x44>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	61d3      	str	r3, [r2, #28]
 800045a:	4b09      	ldr	r3, [pc, #36]	; (8000480 <HAL_TIM_Base_MspInit+0x44>)
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	2100      	movs	r1, #0
 800046a:	201c      	movs	r0, #28
 800046c:	f000 fcfd 	bl	8000e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000470:	201c      	movs	r0, #28
 8000472:	f000 fd16 	bl	8000ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000476:	bf00      	nop
 8000478:	3710      	adds	r7, #16
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000

08000484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a1c      	ldr	r2, [pc, #112]	; (8000510 <HAL_UART_MspInit+0x8c>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d131      	bne.n	8000508 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004a4:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <HAL_UART_MspInit+0x90>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a1a      	ldr	r2, [pc, #104]	; (8000514 <HAL_UART_MspInit+0x90>)
 80004aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b18      	ldr	r3, [pc, #96]	; (8000514 <HAL_UART_MspInit+0x90>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004bc:	4b15      	ldr	r3, [pc, #84]	; (8000514 <HAL_UART_MspInit+0x90>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a14      	ldr	r2, [pc, #80]	; (8000514 <HAL_UART_MspInit+0x90>)
 80004c2:	f043 0304 	orr.w	r3, r3, #4
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b12      	ldr	r3, [pc, #72]	; (8000514 <HAL_UART_MspInit+0x90>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0304 	and.w	r3, r3, #4
 80004d0:	60bb      	str	r3, [r7, #8]
 80004d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004da:	2302      	movs	r3, #2
 80004dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004de:	2303      	movs	r3, #3
 80004e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e2:	f107 0310 	add.w	r3, r7, #16
 80004e6:	4619      	mov	r1, r3
 80004e8:	480b      	ldr	r0, [pc, #44]	; (8000518 <HAL_UART_MspInit+0x94>)
 80004ea:	f000 fcf5 	bl	8000ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	2300      	movs	r3, #0
 80004fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fc:	f107 0310 	add.w	r3, r7, #16
 8000500:	4619      	mov	r1, r3
 8000502:	4805      	ldr	r0, [pc, #20]	; (8000518 <HAL_UART_MspInit+0x94>)
 8000504:	f000 fce8 	bl	8000ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000508:	bf00      	nop
 800050a:	3720      	adds	r7, #32
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40013800 	.word	0x40013800
 8000514:	40021000 	.word	0x40021000
 8000518:	40010800 	.word	0x40010800

0800051c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800052c:	e7fe      	b.n	800052c <HardFault_Handler+0x4>

0800052e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000532:	e7fe      	b.n	8000532 <MemManage_Handler+0x4>

08000534 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <BusFault_Handler+0x4>

0800053a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800053e:	e7fe      	b.n	800053e <UsageFault_Handler+0x4>

08000540 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000568:	f000 fb8c 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}

08000570 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000574:	4803      	ldr	r0, [pc, #12]	; (8000584 <TIM2_IRQHandler+0x14>)
 8000576:	f001 faa3 	bl	8001ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  Task_Run();
 800057a:	f000 f84f 	bl	800061c <Task_Run>
  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
  /* USER CODE END TIM2_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000070 	.word	0x20000070

08000588 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800058c:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <SystemInit+0x5c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a14      	ldr	r2, [pc, #80]	; (80005e4 <SystemInit+0x5c>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <SystemInit+0x5c>)
 800059a:	685a      	ldr	r2, [r3, #4]
 800059c:	4911      	ldr	r1, [pc, #68]	; (80005e4 <SystemInit+0x5c>)
 800059e:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <SystemInit+0x60>)
 80005a0:	4013      	ands	r3, r2
 80005a2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <SystemInit+0x5c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <SystemInit+0x5c>)
 80005aa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005b2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005b4:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <SystemInit+0x5c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <SystemInit+0x5c>)
 80005ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005be:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <SystemInit+0x5c>)
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <SystemInit+0x5c>)
 80005c6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005ca:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <SystemInit+0x5c>)
 80005ce:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005d2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <SystemInit+0x64>)
 80005d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005da:	609a      	str	r2, [r3, #8]
#endif 
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	40021000 	.word	0x40021000
 80005e8:	f8ff0000 	.word	0xf8ff0000
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <Task_Init>:
volatile uint8_t bouncing3=0xFF;
volatile uint8_t bouncing4=0xFF;
volatile uint8_t pressed=NO;
volatile uint16_t timeout;

void Task_Init(void){
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	timeout=0;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <Task_Init+0x20>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	801a      	strh	r2, [r3, #0]
	Kondisi=start;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <Task_Init+0x24>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
	Kondisibaru=st0;
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <Task_Init+0x28>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	200000b8 	.word	0x200000b8
 8000614:	200000ba 	.word	0x200000ba
 8000618:	200000b0 	.word	0x200000b0

0800061c <Task_Run>:

void Task_Run(void){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	//ON;
	switch(Kondisi)
 8000620:	4bbc      	ldr	r3, [pc, #752]	; (8000914 <Task_Run+0x2f8>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b08      	cmp	r3, #8
 8000626:	f200 81fa 	bhi.w	8000a1e <Task_Run+0x402>
 800062a:	a201      	add	r2, pc, #4	; (adr r2, 8000630 <Task_Run+0x14>)
 800062c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000630:	08000655 	.word	0x08000655
 8000634:	08000699 	.word	0x08000699
 8000638:	0800070b 	.word	0x0800070b
 800063c:	08000793 	.word	0x08000793
 8000640:	08000847 	.word	0x08000847
 8000644:	080008c3 	.word	0x080008c3
 8000648:	0800099d 	.word	0x0800099d
 800064c:	080009c5 	.word	0x080009c5
 8000650:	080009dd 	.word	0x080009dd
	{
	case start:
	{
		OFF;
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065a:	48af      	ldr	r0, [pc, #700]	; (8000918 <Task_Run+0x2fc>)
 800065c:	f000 fdad 	bl	80011ba <HAL_GPIO_WritePin>
		UKeep;
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000666:	48ac      	ldr	r0, [pc, #688]	; (8000918 <Task_Run+0x2fc>)
 8000668:	f000 fda7 	bl	80011ba <HAL_GPIO_WritePin>
		Keep;
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000672:	48a9      	ldr	r0, [pc, #676]	; (8000918 <Task_Run+0x2fc>)
 8000674:	f000 fda1 	bl	80011ba <HAL_GPIO_WritePin>
		UART_print("***** Vending Machine *****\n\r");
 8000678:	48a8      	ldr	r0, [pc, #672]	; (800091c <Task_Run+0x300>)
 800067a:	f000 faa9 	bl	8000bd0 <UART_print>
		UART_print("Saldo Rp0 \n\r");
 800067e:	48a8      	ldr	r0, [pc, #672]	; (8000920 <Task_Run+0x304>)
 8000680:	f000 faa6 	bl	8000bd0 <UART_print>
		UART_print("Masukkan Koin Senilai Rp1000 \n\r");
 8000684:	48a7      	ldr	r0, [pc, #668]	; (8000924 <Task_Run+0x308>)
 8000686:	f000 faa3 	bl	8000bd0 <UART_print>
		Kondisi=st0;
 800068a:	4ba2      	ldr	r3, [pc, #648]	; (8000914 <Task_Run+0x2f8>)
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
		timeout=0;
 8000690:	4ba5      	ldr	r3, [pc, #660]	; (8000928 <Task_Run+0x30c>)
 8000692:	2200      	movs	r2, #0
 8000694:	801a      	strh	r2, [r3, #0]
		break;
 8000696:	e1c2      	b.n	8000a1e <Task_Run+0x402>
	}
	case st0:
	{
		if(PB500_OK()){
 8000698:	f000 f9d2 	bl	8000a40 <PB500_OK>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d012      	beq.n	80006c8 <Task_Run+0xac>
			UART_print("Saldo Rp500 \n\r");
 80006a2:	48a2      	ldr	r0, [pc, #648]	; (800092c <Task_Run+0x310>)
 80006a4:	f000 fa94 	bl	8000bd0 <UART_print>
			jeda=100;
 80006a8:	4ba1      	ldr	r3, [pc, #644]	; (8000930 <Task_Run+0x314>)
 80006aa:	2264      	movs	r2, #100	; 0x64
 80006ac:	601a      	str	r2, [r3, #0]
			Kondisibaru=st500;
 80006ae:	4ba1      	ldr	r3, [pc, #644]	; (8000934 <Task_Run+0x318>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	701a      	strb	r2, [r3, #0]
			UART_print("Masukkan lagi Rp500 u/ Ambil \n\r");
 80006b4:	48a0      	ldr	r0, [pc, #640]	; (8000938 <Task_Run+0x31c>)
 80006b6:	f000 fa8b 	bl	8000bd0 <UART_print>
			UART_print("Tekan Cancel u/ Batal \n\r");
 80006ba:	48a0      	ldr	r0, [pc, #640]	; (800093c <Task_Run+0x320>)
 80006bc:	f000 fa88 	bl	8000bd0 <UART_print>
			Kondisi=buzzerdelay;
 80006c0:	4b94      	ldr	r3, [pc, #592]	; (8000914 <Task_Run+0x2f8>)
 80006c2:	2208      	movs	r2, #8
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	e016      	b.n	80006f6 <Task_Run+0xda>
		}
		else if(PB1000_OK()){
 80006c8:	f000 f9ec 	bl	8000aa4 <PB1000_OK>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d011      	beq.n	80006f6 <Task_Run+0xda>
			UART_print("Saldo Rp1000 \n\r");
 80006d2:	489b      	ldr	r0, [pc, #620]	; (8000940 <Task_Run+0x324>)
 80006d4:	f000 fa7c 	bl	8000bd0 <UART_print>
			jeda=100;
 80006d8:	4b95      	ldr	r3, [pc, #596]	; (8000930 <Task_Run+0x314>)
 80006da:	2264      	movs	r2, #100	; 0x64
 80006dc:	601a      	str	r2, [r3, #0]
			Kondisibaru=st1000;
 80006de:	4b95      	ldr	r3, [pc, #596]	; (8000934 <Task_Run+0x318>)
 80006e0:	2203      	movs	r2, #3
 80006e2:	701a      	strb	r2, [r3, #0]
			UART_print("Tekan Proses u/ Ambil \n\r");
 80006e4:	4897      	ldr	r0, [pc, #604]	; (8000944 <Task_Run+0x328>)
 80006e6:	f000 fa73 	bl	8000bd0 <UART_print>
			UART_print("Tekan Cancel u/ Batal \n\r");
 80006ea:	4894      	ldr	r0, [pc, #592]	; (800093c <Task_Run+0x320>)
 80006ec:	f000 fa70 	bl	8000bd0 <UART_print>
			Kondisi=buzzerdelay;
 80006f0:	4b88      	ldr	r3, [pc, #544]	; (8000914 <Task_Run+0x2f8>)
 80006f2:	2208      	movs	r2, #8
 80006f4:	701a      	strb	r2, [r3, #0]
		}
		if(PBBATAL_OK()){
 80006f6:	f000 fa39 	bl	8000b6c <PBBATAL_OK>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	f000 8185 	beq.w	8000a0c <Task_Run+0x3f0>
			Kondisi=start;
 8000702:	4b84      	ldr	r3, [pc, #528]	; (8000914 <Task_Run+0x2f8>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000708:	e180      	b.n	8000a0c <Task_Run+0x3f0>
	}
	case st500:
	{
		if(PB500_OK()){
 800070a:	f000 f999 	bl	8000a40 <PB500_OK>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d015      	beq.n	8000740 <Task_Run+0x124>
			UART_print("Saldo Rp1000 \n\r");
 8000714:	488a      	ldr	r0, [pc, #552]	; (8000940 <Task_Run+0x324>)
 8000716:	f000 fa5b 	bl	8000bd0 <UART_print>
			UART_print("Ambil Minuman? \n\r");
 800071a:	488b      	ldr	r0, [pc, #556]	; (8000948 <Task_Run+0x32c>)
 800071c:	f000 fa58 	bl	8000bd0 <UART_print>
			jeda=100;
 8000720:	4b83      	ldr	r3, [pc, #524]	; (8000930 <Task_Run+0x314>)
 8000722:	2264      	movs	r2, #100	; 0x64
 8000724:	601a      	str	r2, [r3, #0]
			Kondisibaru=st1000;
 8000726:	4b83      	ldr	r3, [pc, #524]	; (8000934 <Task_Run+0x318>)
 8000728:	2203      	movs	r2, #3
 800072a:	701a      	strb	r2, [r3, #0]
			UART_print("Tekan Proses u/ Ambil \n\r");
 800072c:	4885      	ldr	r0, [pc, #532]	; (8000944 <Task_Run+0x328>)
 800072e:	f000 fa4f 	bl	8000bd0 <UART_print>
			UART_print("Tekan Cancel u/ Batal \n\r");
 8000732:	4882      	ldr	r0, [pc, #520]	; (800093c <Task_Run+0x320>)
 8000734:	f000 fa4c 	bl	8000bd0 <UART_print>
			Kondisi=buzzerdelay;
 8000738:	4b76      	ldr	r3, [pc, #472]	; (8000914 <Task_Run+0x2f8>)
 800073a:	2208      	movs	r2, #8
 800073c:	701a      	strb	r2, [r3, #0]
 800073e:	e014      	b.n	800076a <Task_Run+0x14e>
		}
		else if(PB1000_OK()){
 8000740:	f000 f9b0 	bl	8000aa4 <PB1000_OK>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00f      	beq.n	800076a <Task_Run+0x14e>
			UART_print("Saldo Lebih Rp500 \n\r");
 800074a:	4880      	ldr	r0, [pc, #512]	; (800094c <Task_Run+0x330>)
 800074c:	f000 fa40 	bl	8000bd0 <UART_print>
			jeda=800;
 8000750:	4b77      	ldr	r3, [pc, #476]	; (8000930 <Task_Run+0x314>)
 8000752:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000756:	601a      	str	r2, [r3, #0]
			Kondisibaru=stk500;
 8000758:	4b76      	ldr	r3, [pc, #472]	; (8000934 <Task_Run+0x318>)
 800075a:	2204      	movs	r2, #4
 800075c:	701a      	strb	r2, [r3, #0]
			pressed=U500;
 800075e:	4b7c      	ldr	r3, [pc, #496]	; (8000950 <Task_Run+0x334>)
 8000760:	2201      	movs	r2, #1
 8000762:	701a      	strb	r2, [r3, #0]
			Kondisi=buzzerdelay;
 8000764:	4b6b      	ldr	r3, [pc, #428]	; (8000914 <Task_Run+0x2f8>)
 8000766:	2208      	movs	r2, #8
 8000768:	701a      	strb	r2, [r3, #0]
		}
		if(PBBATAL_OK()){
 800076a:	f000 f9ff 	bl	8000b6c <PBBATAL_OK>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 814d 	beq.w	8000a10 <Task_Run+0x3f4>
			UART_print("Saldo Rp0 \n\r");
 8000776:	486a      	ldr	r0, [pc, #424]	; (8000920 <Task_Run+0x304>)
 8000778:	f000 fa2a 	bl	8000bd0 <UART_print>
			jeda=500;
 800077c:	4b6c      	ldr	r3, [pc, #432]	; (8000930 <Task_Run+0x314>)
 800077e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000782:	601a      	str	r2, [r3, #0]
			Kondisibaru=stk500;
 8000784:	4b6b      	ldr	r3, [pc, #428]	; (8000934 <Task_Run+0x318>)
 8000786:	2204      	movs	r2, #4
 8000788:	701a      	strb	r2, [r3, #0]
			Kondisi=buzzerdelay;
 800078a:	4b62      	ldr	r3, [pc, #392]	; (8000914 <Task_Run+0x2f8>)
 800078c:	2208      	movs	r2, #8
 800078e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000790:	e13e      	b.n	8000a10 <Task_Run+0x3f4>
	}

	case st1000:
	{
		OFF;
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000798:	485f      	ldr	r0, [pc, #380]	; (8000918 <Task_Run+0x2fc>)
 800079a:	f000 fd0e 	bl	80011ba <HAL_GPIO_WritePin>
		UKeep;
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007a4:	485c      	ldr	r0, [pc, #368]	; (8000918 <Task_Run+0x2fc>)
 80007a6:	f000 fd08 	bl	80011ba <HAL_GPIO_WritePin>
		if(PB500_OK()){
 80007aa:	f000 f949 	bl	8000a40 <PB500_OK>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d010      	beq.n	80007d6 <Task_Run+0x1ba>
			UART_print("Saldo Lebih Rp500 \n\r");
 80007b4:	4865      	ldr	r0, [pc, #404]	; (800094c <Task_Run+0x330>)
 80007b6:	f000 fa0b 	bl	8000bd0 <UART_print>
			jeda=800;
 80007ba:	4b5d      	ldr	r3, [pc, #372]	; (8000930 <Task_Run+0x314>)
 80007bc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80007c0:	601a      	str	r2, [r3, #0]
			Kondisibaru=stk500;
 80007c2:	4b5c      	ldr	r3, [pc, #368]	; (8000934 <Task_Run+0x318>)
 80007c4:	2204      	movs	r2, #4
 80007c6:	701a      	strb	r2, [r3, #0]
			pressed=U500;
 80007c8:	4b61      	ldr	r3, [pc, #388]	; (8000950 <Task_Run+0x334>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	701a      	strb	r2, [r3, #0]
			Kondisi=buzzerdelay;
 80007ce:	4b51      	ldr	r3, [pc, #324]	; (8000914 <Task_Run+0x2f8>)
 80007d0:	2208      	movs	r2, #8
 80007d2:	701a      	strb	r2, [r3, #0]
 80007d4:	e014      	b.n	8000800 <Task_Run+0x1e4>
		}
		else if(PB1000_OK()){
 80007d6:	f000 f965 	bl	8000aa4 <PB1000_OK>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d00f      	beq.n	8000800 <Task_Run+0x1e4>
			UART_print("Saldo Lebih Rp1000 \n\r");
 80007e0:	485c      	ldr	r0, [pc, #368]	; (8000954 <Task_Run+0x338>)
 80007e2:	f000 f9f5 	bl	8000bd0 <UART_print>
			jeda=800;
 80007e6:	4b52      	ldr	r3, [pc, #328]	; (8000930 <Task_Run+0x314>)
 80007e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80007ec:	601a      	str	r2, [r3, #0]
			Kondisibaru=stk1000;
 80007ee:	4b51      	ldr	r3, [pc, #324]	; (8000934 <Task_Run+0x318>)
 80007f0:	2205      	movs	r2, #5
 80007f2:	701a      	strb	r2, [r3, #0]
			pressed=U1000;
 80007f4:	4b56      	ldr	r3, [pc, #344]	; (8000950 <Task_Run+0x334>)
 80007f6:	2202      	movs	r2, #2
 80007f8:	701a      	strb	r2, [r3, #0]
			Kondisi=buzzerdelay;
 80007fa:	4b46      	ldr	r3, [pc, #280]	; (8000914 <Task_Run+0x2f8>)
 80007fc:	2208      	movs	r2, #8
 80007fe:	701a      	strb	r2, [r3, #0]
		}
		if(PBPROSES_OK()){
 8000800:	f000 f982 	bl	8000b08 <PBPROSES_OK>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d009      	beq.n	800081e <Task_Run+0x202>
			//UART_print("Silahkan ambil minuman \n\r");
			jeda=100;
 800080a:	4b49      	ldr	r3, [pc, #292]	; (8000930 <Task_Run+0x314>)
 800080c:	2264      	movs	r2, #100	; 0x64
 800080e:	601a      	str	r2, [r3, #0]
			Kondisibaru=stopen;
 8000810:	4b48      	ldr	r3, [pc, #288]	; (8000934 <Task_Run+0x318>)
 8000812:	2206      	movs	r2, #6
 8000814:	701a      	strb	r2, [r3, #0]
			Kondisi=buzzerdelay;
 8000816:	4b3f      	ldr	r3, [pc, #252]	; (8000914 <Task_Run+0x2f8>)
 8000818:	2208      	movs	r2, #8
 800081a:	701a      	strb	r2, [r3, #0]
			UART_print("Saldo Rp0 \n\r");
			jeda=500;
			Kondisibaru=stk1000;
			Kondisi=buzzerdelay;
		}
		break;
 800081c:	e0fa      	b.n	8000a14 <Task_Run+0x3f8>
		else if(PBBATAL_OK()){
 800081e:	f000 f9a5 	bl	8000b6c <PBBATAL_OK>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	f000 80f5 	beq.w	8000a14 <Task_Run+0x3f8>
			UART_print("Saldo Rp0 \n\r");
 800082a:	483d      	ldr	r0, [pc, #244]	; (8000920 <Task_Run+0x304>)
 800082c:	f000 f9d0 	bl	8000bd0 <UART_print>
			jeda=500;
 8000830:	4b3f      	ldr	r3, [pc, #252]	; (8000930 <Task_Run+0x314>)
 8000832:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000836:	601a      	str	r2, [r3, #0]
			Kondisibaru=stk1000;
 8000838:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <Task_Run+0x318>)
 800083a:	2205      	movs	r2, #5
 800083c:	701a      	strb	r2, [r3, #0]
			Kondisi=buzzerdelay;
 800083e:	4b35      	ldr	r3, [pc, #212]	; (8000914 <Task_Run+0x2f8>)
 8000840:	2208      	movs	r2, #8
 8000842:	701a      	strb	r2, [r3, #0]
		break;
 8000844:	e0e6      	b.n	8000a14 <Task_Run+0x3f8>
	}
	case stk500:
	{
		if(pressed==U500){
 8000846:	4b42      	ldr	r3, [pc, #264]	; (8000950 <Task_Run+0x334>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b01      	cmp	r3, #1
 800084e:	d11c      	bne.n	800088a <Task_Run+0x26e>
			ON;
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000856:	4830      	ldr	r0, [pc, #192]	; (8000918 <Task_Run+0x2fc>)
 8000858:	f000 fcaf 	bl	80011ba <HAL_GPIO_WritePin>
			UART_print("Silahkan ambil Rp500 \n\r");
 800085c:	483e      	ldr	r0, [pc, #248]	; (8000958 <Task_Run+0x33c>)
 800085e:	f000 f9b7 	bl	8000bd0 <UART_print>
			jeda=1000;
 8000862:	4b33      	ldr	r3, [pc, #204]	; (8000930 <Task_Run+0x314>)
 8000864:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000868:	601a      	str	r2, [r3, #0]
			Kondisibaru=st1000;
 800086a:	4b32      	ldr	r3, [pc, #200]	; (8000934 <Task_Run+0x318>)
 800086c:	2203      	movs	r2, #3
 800086e:	701a      	strb	r2, [r3, #0]
			UART_print("Ambil minuman? \n\r");
 8000870:	483a      	ldr	r0, [pc, #232]	; (800095c <Task_Run+0x340>)
 8000872:	f000 f9ad 	bl	8000bd0 <UART_print>
			UART_print("Tekan Proses u/ Ambil \n\r");
 8000876:	4833      	ldr	r0, [pc, #204]	; (8000944 <Task_Run+0x328>)
 8000878:	f000 f9aa 	bl	8000bd0 <UART_print>
			UART_print("Tekan Cancel u/ Batal \n\r");
 800087c:	482f      	ldr	r0, [pc, #188]	; (800093c <Task_Run+0x320>)
 800087e:	f000 f9a7 	bl	8000bd0 <UART_print>
			Kondisi=delay;
 8000882:	4b24      	ldr	r3, [pc, #144]	; (8000914 <Task_Run+0x2f8>)
 8000884:	2207      	movs	r2, #7
 8000886:	701a      	strb	r2, [r3, #0]
 8000888:	e017      	b.n	80008ba <Task_Run+0x29e>
		}
		else if(pressed==NO){
 800088a:	4b31      	ldr	r3, [pc, #196]	; (8000950 <Task_Run+0x334>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d112      	bne.n	80008ba <Task_Run+0x29e>
		UART_print("Silahkan ambil Rp500 \n\r");
 8000894:	4830      	ldr	r0, [pc, #192]	; (8000958 <Task_Run+0x33c>)
 8000896:	f000 f99b 	bl	8000bd0 <UART_print>
		ON;
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008a0:	481d      	ldr	r0, [pc, #116]	; (8000918 <Task_Run+0x2fc>)
 80008a2:	f000 fc8a 	bl	80011ba <HAL_GPIO_WritePin>
		jeda=1000;
 80008a6:	4b22      	ldr	r3, [pc, #136]	; (8000930 <Task_Run+0x314>)
 80008a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008ac:	601a      	str	r2, [r3, #0]
		Kondisibaru=start;
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <Task_Run+0x318>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
		Kondisi=delay;
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <Task_Run+0x2f8>)
 80008b6:	2207      	movs	r2, #7
 80008b8:	701a      	strb	r2, [r3, #0]
		}
		pressed=NO;
 80008ba:	4b25      	ldr	r3, [pc, #148]	; (8000950 <Task_Run+0x334>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
		break;
 80008c0:	e0ad      	b.n	8000a1e <Task_Run+0x402>
	}
	case stk1000:
	{
		UDrop;
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c8:	4813      	ldr	r0, [pc, #76]	; (8000918 <Task_Run+0x2fc>)
 80008ca:	f000 fc76 	bl	80011ba <HAL_GPIO_WritePin>
		if(pressed==U1000){
 80008ce:	4b20      	ldr	r3, [pc, #128]	; (8000950 <Task_Run+0x334>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d145      	bne.n	8000964 <Task_Run+0x348>
			UDrop;
 80008d8:	2200      	movs	r2, #0
 80008da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <Task_Run+0x2fc>)
 80008e0:	f000 fc6b 	bl	80011ba <HAL_GPIO_WritePin>
			UART_print("Silahkan ambil Rp1000 \n\r");
 80008e4:	481e      	ldr	r0, [pc, #120]	; (8000960 <Task_Run+0x344>)
 80008e6:	f000 f973 	bl	8000bd0 <UART_print>
			jeda=1000;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <Task_Run+0x314>)
 80008ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008f0:	601a      	str	r2, [r3, #0]
			Kondisibaru=st1000;
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <Task_Run+0x318>)
 80008f4:	2203      	movs	r2, #3
 80008f6:	701a      	strb	r2, [r3, #0]
			UART_print("Ambil minuman? \n\r");
 80008f8:	4818      	ldr	r0, [pc, #96]	; (800095c <Task_Run+0x340>)
 80008fa:	f000 f969 	bl	8000bd0 <UART_print>
			UART_print("Tekan Proses u/ Ambil \n\r");
 80008fe:	4811      	ldr	r0, [pc, #68]	; (8000944 <Task_Run+0x328>)
 8000900:	f000 f966 	bl	8000bd0 <UART_print>
			UART_print("Tekan Cancel u/ Batal \n\r");
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <Task_Run+0x320>)
 8000906:	f000 f963 	bl	8000bd0 <UART_print>
			Kondisi=delay;
 800090a:	4b02      	ldr	r3, [pc, #8]	; (8000914 <Task_Run+0x2f8>)
 800090c:	2207      	movs	r2, #7
 800090e:	701a      	strb	r2, [r3, #0]
 8000910:	e040      	b.n	8000994 <Task_Run+0x378>
 8000912:	bf00      	nop
 8000914:	200000ba 	.word	0x200000ba
 8000918:	40010c00 	.word	0x40010c00
 800091c:	08002604 	.word	0x08002604
 8000920:	08002624 	.word	0x08002624
 8000924:	08002634 	.word	0x08002634
 8000928:	200000b8 	.word	0x200000b8
 800092c:	08002654 	.word	0x08002654
 8000930:	200000b4 	.word	0x200000b4
 8000934:	200000b0 	.word	0x200000b0
 8000938:	08002664 	.word	0x08002664
 800093c:	08002684 	.word	0x08002684
 8000940:	080026a0 	.word	0x080026a0
 8000944:	080026b0 	.word	0x080026b0
 8000948:	080026cc 	.word	0x080026cc
 800094c:	080026e0 	.word	0x080026e0
 8000950:	2000002c 	.word	0x2000002c
 8000954:	080026f8 	.word	0x080026f8
 8000958:	08002710 	.word	0x08002710
 800095c:	08002728 	.word	0x08002728
 8000960:	0800273c 	.word	0x0800273c
		}
		else if(pressed==NO) {
 8000964:	4b2f      	ldr	r3, [pc, #188]	; (8000a24 <Task_Run+0x408>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b00      	cmp	r3, #0
 800096c:	d112      	bne.n	8000994 <Task_Run+0x378>
		UDrop;
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000974:	482c      	ldr	r0, [pc, #176]	; (8000a28 <Task_Run+0x40c>)
 8000976:	f000 fc20 	bl	80011ba <HAL_GPIO_WritePin>
		UART_print("Silahkan ambil Rp1000 \n\r");
 800097a:	482c      	ldr	r0, [pc, #176]	; (8000a2c <Task_Run+0x410>)
 800097c:	f000 f928 	bl	8000bd0 <UART_print>
		jeda=1000;
 8000980:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <Task_Run+0x414>)
 8000982:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000986:	601a      	str	r2, [r3, #0]
		Kondisibaru=start;
 8000988:	4b2a      	ldr	r3, [pc, #168]	; (8000a34 <Task_Run+0x418>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
		Kondisi=delay;
 800098e:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <Task_Run+0x41c>)
 8000990:	2207      	movs	r2, #7
 8000992:	701a      	strb	r2, [r3, #0]
		}
		pressed=NO;
 8000994:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <Task_Run+0x408>)
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
		break;
 800099a:	e040      	b.n	8000a1e <Task_Run+0x402>
	}
	case stopen:
	{
		Drop;
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a2:	4821      	ldr	r0, [pc, #132]	; (8000a28 <Task_Run+0x40c>)
 80009a4:	f000 fc09 	bl	80011ba <HAL_GPIO_WritePin>
		UART_print("Silahkan ambil minuman \n\r");
 80009a8:	4824      	ldr	r0, [pc, #144]	; (8000a3c <Task_Run+0x420>)
 80009aa:	f000 f911 	bl	8000bd0 <UART_print>
		jeda=2000;
 80009ae:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <Task_Run+0x414>)
 80009b0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80009b4:	601a      	str	r2, [r3, #0]
		Kondisibaru=start;
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <Task_Run+0x418>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
		Kondisi=buzzerdelay;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <Task_Run+0x41c>)
 80009be:	2208      	movs	r2, #8
 80009c0:	701a      	strb	r2, [r3, #0]
		break;
 80009c2:	e02c      	b.n	8000a1e <Task_Run+0x402>
	}
	case delay:
	{
		//jeda--;
		if(jeda--==0){
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <Task_Run+0x414>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	1e5a      	subs	r2, r3, #1
 80009ca:	4919      	ldr	r1, [pc, #100]	; (8000a30 <Task_Run+0x414>)
 80009cc:	600a      	str	r2, [r1, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d122      	bne.n	8000a18 <Task_Run+0x3fc>
			Kondisi=Kondisibaru;
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <Task_Run+0x418>)
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <Task_Run+0x41c>)
 80009d8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80009da:	e01d      	b.n	8000a18 <Task_Run+0x3fc>
	}
	case buzzerdelay:
	{
		buzzerON;
 80009dc:	2201      	movs	r2, #1
 80009de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e2:	4811      	ldr	r0, [pc, #68]	; (8000a28 <Task_Run+0x40c>)
 80009e4:	f000 fbe9 	bl	80011ba <HAL_GPIO_WritePin>
		//jeda--;
		if(jeda--==0){
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <Task_Run+0x414>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	1e5a      	subs	r2, r3, #1
 80009ee:	4910      	ldr	r1, [pc, #64]	; (8000a30 <Task_Run+0x414>)
 80009f0:	600a      	str	r2, [r1, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d112      	bne.n	8000a1c <Task_Run+0x400>
			Kondisi=Kondisibaru;
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <Task_Run+0x418>)
 80009f8:	781a      	ldrb	r2, [r3, #0]
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <Task_Run+0x41c>)
 80009fc:	701a      	strb	r2, [r3, #0]
			buzzerOFF;
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a04:	4808      	ldr	r0, [pc, #32]	; (8000a28 <Task_Run+0x40c>)
 8000a06:	f000 fbd8 	bl	80011ba <HAL_GPIO_WritePin>
		}
		break;
 8000a0a:	e007      	b.n	8000a1c <Task_Run+0x400>
		break;
 8000a0c:	bf00      	nop
 8000a0e:	e006      	b.n	8000a1e <Task_Run+0x402>
		break;
 8000a10:	bf00      	nop
 8000a12:	e004      	b.n	8000a1e <Task_Run+0x402>
		break;
 8000a14:	bf00      	nop
 8000a16:	e002      	b.n	8000a1e <Task_Run+0x402>
		break;
 8000a18:	bf00      	nop
 8000a1a:	e000      	b.n	8000a1e <Task_Run+0x402>
		break;
 8000a1c:	bf00      	nop
	}
	}
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000002c 	.word	0x2000002c
 8000a28:	40010c00 	.word	0x40010c00
 8000a2c:	0800273c 	.word	0x0800273c
 8000a30:	200000b4 	.word	0x200000b4
 8000a34:	200000b0 	.word	0x200000b0
 8000a38:	200000ba 	.word	0x200000ba
 8000a3c:	08002758 	.word	0x08002758

08000a40 <PB500_OK>:

unsigned char PB500_OK(void){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
	static unsigned char bouncing1=0xFF;
	unsigned char detectedFLag=0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(PB500_GPIO_Port,PB500_Pin)== GPIO_PIN_RESET){
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	4812      	ldr	r0, [pc, #72]	; (8000a98 <PB500_OK+0x58>)
 8000a4e:	f000 fb9d 	bl	800118c <HAL_GPIO_ReadPin>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d106      	bne.n	8000a66 <PB500_OK+0x26>
		bouncing1=(bouncing1<<1);
 8000a58:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <PB500_OK+0x5c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <PB500_OK+0x5c>)
 8000a62:	701a      	strb	r2, [r3, #0]
 8000a64:	e009      	b.n	8000a7a <PB500_OK+0x3a>
	} else {
		bouncing1=(bouncing1<<1)|1;
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <PB500_OK+0x5c>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	b25b      	sxtb	r3, r3
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	b25b      	sxtb	r3, r3
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <PB500_OK+0x5c>)
 8000a78:	701a      	strb	r2, [r3, #0]
	}
	if (bouncing1==0x03) {
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <PB500_OK+0x5c>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	d104      	bne.n	8000a8c <PB500_OK+0x4c>
		UART_print("Koin 500 \n\r");
 8000a82:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <PB500_OK+0x60>)
 8000a84:	f000 f8a4 	bl	8000bd0 <UART_print>
		detectedFLag=1;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40010800 	.word	0x40010800
 8000a9c:	20000004 	.word	0x20000004
 8000aa0:	08002774 	.word	0x08002774

08000aa4 <PB1000_OK>:

unsigned char PB1000_OK(void){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
	static unsigned char bouncing2=0xFF;
	unsigned char detectedFLag=0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(PB1000_GPIO_Port,PB1000_Pin)== GPIO_PIN_RESET){
 8000aae:	2120      	movs	r1, #32
 8000ab0:	4812      	ldr	r0, [pc, #72]	; (8000afc <PB1000_OK+0x58>)
 8000ab2:	f000 fb6b 	bl	800118c <HAL_GPIO_ReadPin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d106      	bne.n	8000aca <PB1000_OK+0x26>
		bouncing2=(bouncing2<<1);
 8000abc:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <PB1000_OK+0x5c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <PB1000_OK+0x5c>)
 8000ac6:	701a      	strb	r2, [r3, #0]
 8000ac8:	e009      	b.n	8000ade <PB1000_OK+0x3a>
	} else {
		bouncing2=(bouncing2<<1)|1;
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <PB1000_OK+0x5c>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	b25b      	sxtb	r3, r3
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	b25b      	sxtb	r3, r3
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <PB1000_OK+0x5c>)
 8000adc:	701a      	strb	r2, [r3, #0]
	}
	if (bouncing2==0x03) {
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <PB1000_OK+0x5c>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b03      	cmp	r3, #3
 8000ae4:	d104      	bne.n	8000af0 <PB1000_OK+0x4c>
		UART_print("Koin 1000 \n\r");
 8000ae6:	4807      	ldr	r0, [pc, #28]	; (8000b04 <PB1000_OK+0x60>)
 8000ae8:	f000 f872 	bl	8000bd0 <UART_print>
		detectedFLag=1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8000af0:	79fb      	ldrb	r3, [r7, #7]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40010800 	.word	0x40010800
 8000b00:	20000005 	.word	0x20000005
 8000b04:	08002780 	.word	0x08002780

08000b08 <PBPROSES_OK>:

unsigned char PBPROSES_OK(void){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
	static unsigned char bouncing3=0xFF;
	unsigned char detectedFLag=0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(PBPROSES_GPIO_Port,PBPROSES_Pin)== GPIO_PIN_RESET){
 8000b12:	2140      	movs	r1, #64	; 0x40
 8000b14:	4812      	ldr	r0, [pc, #72]	; (8000b60 <PBPROSES_OK+0x58>)
 8000b16:	f000 fb39 	bl	800118c <HAL_GPIO_ReadPin>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d106      	bne.n	8000b2e <PBPROSES_OK+0x26>
		bouncing3=(bouncing3<<1);
 8000b20:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <PBPROSES_OK+0x5c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <PBPROSES_OK+0x5c>)
 8000b2a:	701a      	strb	r2, [r3, #0]
 8000b2c:	e009      	b.n	8000b42 <PBPROSES_OK+0x3a>
	} else {
		bouncing3=(bouncing3<<1)|1;
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <PBPROSES_OK+0x5c>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	b25b      	sxtb	r3, r3
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	b25b      	sxtb	r3, r3
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <PBPROSES_OK+0x5c>)
 8000b40:	701a      	strb	r2, [r3, #0]
	}
	if (bouncing3==0x03) {
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <PBPROSES_OK+0x5c>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d104      	bne.n	8000b54 <PBPROSES_OK+0x4c>
		UART_print("Memproses \n\r");
 8000b4a:	4807      	ldr	r0, [pc, #28]	; (8000b68 <PBPROSES_OK+0x60>)
 8000b4c:	f000 f840 	bl	8000bd0 <UART_print>
		detectedFLag=1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40010800 	.word	0x40010800
 8000b64:	20000006 	.word	0x20000006
 8000b68:	08002790 	.word	0x08002790

08000b6c <PBBATAL_OK>:

unsigned char PBBATAL_OK(void){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
	static unsigned char bouncing4=0xFF;
	unsigned char detectedFLag=0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(PBBATAL_GPIO_Port,PBBATAL_Pin)== GPIO_PIN_RESET){
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	4812      	ldr	r0, [pc, #72]	; (8000bc4 <PBBATAL_OK+0x58>)
 8000b7a:	f000 fb07 	bl	800118c <HAL_GPIO_ReadPin>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d106      	bne.n	8000b92 <PBBATAL_OK+0x26>
		bouncing4=(bouncing4<<1);
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <PBBATAL_OK+0x5c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <PBBATAL_OK+0x5c>)
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	e009      	b.n	8000ba6 <PBBATAL_OK+0x3a>
	} else {
		bouncing4=(bouncing4<<1)|1;
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <PBBATAL_OK+0x5c>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	b25b      	sxtb	r3, r3
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <PBBATAL_OK+0x5c>)
 8000ba4:	701a      	strb	r2, [r3, #0]
	}
	if (bouncing4==0x03) {
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <PBBATAL_OK+0x5c>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d104      	bne.n	8000bb8 <PBBATAL_OK+0x4c>
		UART_print("Membatalkan \n\r");
 8000bae:	4807      	ldr	r0, [pc, #28]	; (8000bcc <PBBATAL_OK+0x60>)
 8000bb0:	f000 f80e 	bl	8000bd0 <UART_print>
		detectedFLag=1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40010800 	.word	0x40010800
 8000bc8:	20000007 	.word	0x20000007
 8000bcc:	080027a0 	.word	0x080027a0

08000bd0 <UART_print>:
 *      Author: Yogi Iman
 */

#include "uart.h"

void UART_print(char *pData){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)pData, strlen(pData), 10);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff fab7 	bl	800014c <strlen>
 8000bde:	4603      	mov	r3, r0
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	230a      	movs	r3, #10
 8000be4:	6879      	ldr	r1, [r7, #4]
 8000be6:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <UART_print+0x24>)
 8000be8:	f001 faf1 	bl	80021ce <HAL_UART_Transmit>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000030 	.word	0x20000030

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_Init+0x28>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_Init+0x28>)
 8000c02:	f043 0310 	orr.w	r3, r3, #16
 8000c06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f923 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f000 f808 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fbe0 	bl	80003d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40022000 	.word	0x40022000

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_InitTick+0x54>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x58>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f93b 	bl	8000ebe <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00e      	b.n	8000c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d80a      	bhi.n	8000c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f000 f903 	bl	8000e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4a06      	ldr	r2, [pc, #24]	; (8000c80 <HAL_InitTick+0x5c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	2000000c 	.word	0x2000000c
 8000c80:	20000008 	.word	0x20000008

08000c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_IncTick+0x1c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a03      	ldr	r2, [pc, #12]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	2000000c 	.word	0x2000000c
 8000ca4:	200000bc 	.word	0x200000bc

08000ca8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b02      	ldr	r3, [pc, #8]	; (8000cb8 <HAL_GetTick+0x10>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	200000bc 	.word	0x200000bc

08000cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <__NVIC_GetPriorityGrouping+0x18>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	f003 0307 	and.w	r3, r3, #7
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	db0b      	blt.n	8000d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f003 021f 	and.w	r2, r3, #31
 8000d38:	4906      	ldr	r1, [pc, #24]	; (8000d54 <__NVIC_EnableIRQ+0x34>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	095b      	lsrs	r3, r3, #5
 8000d40:	2001      	movs	r0, #1
 8000d42:	fa00 f202 	lsl.w	r2, r0, r2
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db0a      	blt.n	8000d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	490c      	ldr	r1, [pc, #48]	; (8000da4 <__NVIC_SetPriority+0x4c>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d80:	e00a      	b.n	8000d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4908      	ldr	r1, [pc, #32]	; (8000da8 <__NVIC_SetPriority+0x50>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	3b04      	subs	r3, #4
 8000d90:	0112      	lsls	r2, r2, #4
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	761a      	strb	r2, [r3, #24]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f1c3 0307 	rsb	r3, r3, #7
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	bf28      	it	cs
 8000dca:	2304      	movcs	r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d902      	bls.n	8000ddc <NVIC_EncodePriority+0x30>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3b03      	subs	r3, #3
 8000dda:	e000      	b.n	8000dde <NVIC_EncodePriority+0x32>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43da      	mvns	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43d9      	mvns	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	4313      	orrs	r3, r2
         );
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3724      	adds	r7, #36	; 0x24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e20:	d301      	bcc.n	8000e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00f      	b.n	8000e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <SysTick_Config+0x40>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2e:	210f      	movs	r1, #15
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f7ff ff90 	bl	8000d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <SysTick_Config+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <SysTick_Config+0x40>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff2d 	bl	8000cbc <__NVIC_SetPriorityGrouping>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7c:	f7ff ff42 	bl	8000d04 <__NVIC_GetPriorityGrouping>
 8000e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	f7ff ff90 	bl	8000dac <NVIC_EncodePriority>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff5f 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff35 	bl	8000d20 <__NVIC_EnableIRQ>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffa2 	bl	8000e10 <SysTick_Config>
 8000ecc:	4603      	mov	r3, r0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b08b      	sub	sp, #44	; 0x2c
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eea:	e127      	b.n	800113c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000eec:	2201      	movs	r2, #1
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	69fa      	ldr	r2, [r7, #28]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	f040 8116 	bne.w	8001136 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2b12      	cmp	r3, #18
 8000f10:	d034      	beq.n	8000f7c <HAL_GPIO_Init+0xa4>
 8000f12:	2b12      	cmp	r3, #18
 8000f14:	d80d      	bhi.n	8000f32 <HAL_GPIO_Init+0x5a>
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d02b      	beq.n	8000f72 <HAL_GPIO_Init+0x9a>
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d804      	bhi.n	8000f28 <HAL_GPIO_Init+0x50>
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d031      	beq.n	8000f86 <HAL_GPIO_Init+0xae>
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d01c      	beq.n	8000f60 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f26:	e048      	b.n	8000fba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d043      	beq.n	8000fb4 <HAL_GPIO_Init+0xdc>
 8000f2c:	2b11      	cmp	r3, #17
 8000f2e:	d01b      	beq.n	8000f68 <HAL_GPIO_Init+0x90>
          break;
 8000f30:	e043      	b.n	8000fba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f32:	4a89      	ldr	r2, [pc, #548]	; (8001158 <HAL_GPIO_Init+0x280>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d026      	beq.n	8000f86 <HAL_GPIO_Init+0xae>
 8000f38:	4a87      	ldr	r2, [pc, #540]	; (8001158 <HAL_GPIO_Init+0x280>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d806      	bhi.n	8000f4c <HAL_GPIO_Init+0x74>
 8000f3e:	4a87      	ldr	r2, [pc, #540]	; (800115c <HAL_GPIO_Init+0x284>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d020      	beq.n	8000f86 <HAL_GPIO_Init+0xae>
 8000f44:	4a86      	ldr	r2, [pc, #536]	; (8001160 <HAL_GPIO_Init+0x288>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d01d      	beq.n	8000f86 <HAL_GPIO_Init+0xae>
          break;
 8000f4a:	e036      	b.n	8000fba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f4c:	4a85      	ldr	r2, [pc, #532]	; (8001164 <HAL_GPIO_Init+0x28c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d019      	beq.n	8000f86 <HAL_GPIO_Init+0xae>
 8000f52:	4a85      	ldr	r2, [pc, #532]	; (8001168 <HAL_GPIO_Init+0x290>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d016      	beq.n	8000f86 <HAL_GPIO_Init+0xae>
 8000f58:	4a84      	ldr	r2, [pc, #528]	; (800116c <HAL_GPIO_Init+0x294>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d013      	beq.n	8000f86 <HAL_GPIO_Init+0xae>
          break;
 8000f5e:	e02c      	b.n	8000fba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	623b      	str	r3, [r7, #32]
          break;
 8000f66:	e028      	b.n	8000fba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	623b      	str	r3, [r7, #32]
          break;
 8000f70:	e023      	b.n	8000fba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	3308      	adds	r3, #8
 8000f78:	623b      	str	r3, [r7, #32]
          break;
 8000f7a:	e01e      	b.n	8000fba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	330c      	adds	r3, #12
 8000f82:	623b      	str	r3, [r7, #32]
          break;
 8000f84:	e019      	b.n	8000fba <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d102      	bne.n	8000f94 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f8e:	2304      	movs	r3, #4
 8000f90:	623b      	str	r3, [r7, #32]
          break;
 8000f92:	e012      	b.n	8000fba <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d105      	bne.n	8000fa8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f9c:	2308      	movs	r3, #8
 8000f9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69fa      	ldr	r2, [r7, #28]
 8000fa4:	611a      	str	r2, [r3, #16]
          break;
 8000fa6:	e008      	b.n	8000fba <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fa8:	2308      	movs	r3, #8
 8000faa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69fa      	ldr	r2, [r7, #28]
 8000fb0:	615a      	str	r2, [r3, #20]
          break;
 8000fb2:	e002      	b.n	8000fba <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
          break;
 8000fb8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	2bff      	cmp	r3, #255	; 0xff
 8000fbe:	d801      	bhi.n	8000fc4 <HAL_GPIO_Init+0xec>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	e001      	b.n	8000fc8 <HAL_GPIO_Init+0xf0>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3304      	adds	r3, #4
 8000fc8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	2bff      	cmp	r3, #255	; 0xff
 8000fce:	d802      	bhi.n	8000fd6 <HAL_GPIO_Init+0xfe>
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	e002      	b.n	8000fdc <HAL_GPIO_Init+0x104>
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	3b08      	subs	r3, #8
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	401a      	ands	r2, r3
 8000fee:	6a39      	ldr	r1, [r7, #32]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001004:	2b00      	cmp	r3, #0
 8001006:	f000 8096 	beq.w	8001136 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800100a:	4b59      	ldr	r3, [pc, #356]	; (8001170 <HAL_GPIO_Init+0x298>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	4a58      	ldr	r2, [pc, #352]	; (8001170 <HAL_GPIO_Init+0x298>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6193      	str	r3, [r2, #24]
 8001016:	4b56      	ldr	r3, [pc, #344]	; (8001170 <HAL_GPIO_Init+0x298>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001022:	4a54      	ldr	r2, [pc, #336]	; (8001174 <HAL_GPIO_Init+0x29c>)
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	089b      	lsrs	r3, r3, #2
 8001028:	3302      	adds	r3, #2
 800102a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	220f      	movs	r2, #15
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	4013      	ands	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4b      	ldr	r2, [pc, #300]	; (8001178 <HAL_GPIO_Init+0x2a0>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d013      	beq.n	8001076 <HAL_GPIO_Init+0x19e>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4a      	ldr	r2, [pc, #296]	; (800117c <HAL_GPIO_Init+0x2a4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d00d      	beq.n	8001072 <HAL_GPIO_Init+0x19a>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a49      	ldr	r2, [pc, #292]	; (8001180 <HAL_GPIO_Init+0x2a8>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d007      	beq.n	800106e <HAL_GPIO_Init+0x196>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a48      	ldr	r2, [pc, #288]	; (8001184 <HAL_GPIO_Init+0x2ac>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d101      	bne.n	800106a <HAL_GPIO_Init+0x192>
 8001066:	2303      	movs	r3, #3
 8001068:	e006      	b.n	8001078 <HAL_GPIO_Init+0x1a0>
 800106a:	2304      	movs	r3, #4
 800106c:	e004      	b.n	8001078 <HAL_GPIO_Init+0x1a0>
 800106e:	2302      	movs	r3, #2
 8001070:	e002      	b.n	8001078 <HAL_GPIO_Init+0x1a0>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <HAL_GPIO_Init+0x1a0>
 8001076:	2300      	movs	r3, #0
 8001078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800107a:	f002 0203 	and.w	r2, r2, #3
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	4093      	lsls	r3, r2
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	4313      	orrs	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001088:	493a      	ldr	r1, [pc, #232]	; (8001174 <HAL_GPIO_Init+0x29c>)
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d006      	beq.n	80010b0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010a2:	4b39      	ldr	r3, [pc, #228]	; (8001188 <HAL_GPIO_Init+0x2b0>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4938      	ldr	r1, [pc, #224]	; (8001188 <HAL_GPIO_Init+0x2b0>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	600b      	str	r3, [r1, #0]
 80010ae:	e006      	b.n	80010be <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010b0:	4b35      	ldr	r3, [pc, #212]	; (8001188 <HAL_GPIO_Init+0x2b0>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	4933      	ldr	r1, [pc, #204]	; (8001188 <HAL_GPIO_Init+0x2b0>)
 80010ba:	4013      	ands	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d006      	beq.n	80010d8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010ca:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <HAL_GPIO_Init+0x2b0>)
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	492e      	ldr	r1, [pc, #184]	; (8001188 <HAL_GPIO_Init+0x2b0>)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	604b      	str	r3, [r1, #4]
 80010d6:	e006      	b.n	80010e6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010d8:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <HAL_GPIO_Init+0x2b0>)
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	43db      	mvns	r3, r3
 80010e0:	4929      	ldr	r1, [pc, #164]	; (8001188 <HAL_GPIO_Init+0x2b0>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d006      	beq.n	8001100 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010f2:	4b25      	ldr	r3, [pc, #148]	; (8001188 <HAL_GPIO_Init+0x2b0>)
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	4924      	ldr	r1, [pc, #144]	; (8001188 <HAL_GPIO_Init+0x2b0>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	608b      	str	r3, [r1, #8]
 80010fe:	e006      	b.n	800110e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001100:	4b21      	ldr	r3, [pc, #132]	; (8001188 <HAL_GPIO_Init+0x2b0>)
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	43db      	mvns	r3, r3
 8001108:	491f      	ldr	r1, [pc, #124]	; (8001188 <HAL_GPIO_Init+0x2b0>)
 800110a:	4013      	ands	r3, r2
 800110c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d006      	beq.n	8001128 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800111a:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <HAL_GPIO_Init+0x2b0>)
 800111c:	68da      	ldr	r2, [r3, #12]
 800111e:	491a      	ldr	r1, [pc, #104]	; (8001188 <HAL_GPIO_Init+0x2b0>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	60cb      	str	r3, [r1, #12]
 8001126:	e006      	b.n	8001136 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_GPIO_Init+0x2b0>)
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	43db      	mvns	r3, r3
 8001130:	4915      	ldr	r1, [pc, #84]	; (8001188 <HAL_GPIO_Init+0x2b0>)
 8001132:	4013      	ands	r3, r2
 8001134:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	3301      	adds	r3, #1
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	fa22 f303 	lsr.w	r3, r2, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	f47f aed0 	bne.w	8000eec <HAL_GPIO_Init+0x14>
  }
}
 800114c:	bf00      	nop
 800114e:	372c      	adds	r7, #44	; 0x2c
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	10210000 	.word	0x10210000
 800115c:	10110000 	.word	0x10110000
 8001160:	10120000 	.word	0x10120000
 8001164:	10310000 	.word	0x10310000
 8001168:	10320000 	.word	0x10320000
 800116c:	10220000 	.word	0x10220000
 8001170:	40021000 	.word	0x40021000
 8001174:	40010000 	.word	0x40010000
 8001178:	40010800 	.word	0x40010800
 800117c:	40010c00 	.word	0x40010c00
 8001180:	40011000 	.word	0x40011000
 8001184:	40011400 	.word	0x40011400
 8001188:	40010400 	.word	0x40010400

0800118c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	887b      	ldrh	r3, [r7, #2]
 800119e:	4013      	ands	r3, r2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	e001      	b.n	80011ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	460b      	mov	r3, r1
 80011c4:	807b      	strh	r3, [r7, #2]
 80011c6:	4613      	mov	r3, r2
 80011c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011ca:	787b      	ldrb	r3, [r7, #1]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d0:	887a      	ldrh	r2, [r7, #2]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011d6:	e003      	b.n	80011e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	041a      	lsls	r2, r3, #16
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	611a      	str	r2, [r3, #16]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
	...

080011ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e26c      	b.n	80016d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 8087 	beq.w	800131a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800120c:	4b92      	ldr	r3, [pc, #584]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 030c 	and.w	r3, r3, #12
 8001214:	2b04      	cmp	r3, #4
 8001216:	d00c      	beq.n	8001232 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001218:	4b8f      	ldr	r3, [pc, #572]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 030c 	and.w	r3, r3, #12
 8001220:	2b08      	cmp	r3, #8
 8001222:	d112      	bne.n	800124a <HAL_RCC_OscConfig+0x5e>
 8001224:	4b8c      	ldr	r3, [pc, #560]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001230:	d10b      	bne.n	800124a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001232:	4b89      	ldr	r3, [pc, #548]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d06c      	beq.n	8001318 <HAL_RCC_OscConfig+0x12c>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d168      	bne.n	8001318 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e246      	b.n	80016d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001252:	d106      	bne.n	8001262 <HAL_RCC_OscConfig+0x76>
 8001254:	4b80      	ldr	r3, [pc, #512]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a7f      	ldr	r2, [pc, #508]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 800125a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	e02e      	b.n	80012c0 <HAL_RCC_OscConfig+0xd4>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10c      	bne.n	8001284 <HAL_RCC_OscConfig+0x98>
 800126a:	4b7b      	ldr	r3, [pc, #492]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a7a      	ldr	r2, [pc, #488]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b78      	ldr	r3, [pc, #480]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a77      	ldr	r2, [pc, #476]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 800127c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e01d      	b.n	80012c0 <HAL_RCC_OscConfig+0xd4>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800128c:	d10c      	bne.n	80012a8 <HAL_RCC_OscConfig+0xbc>
 800128e:	4b72      	ldr	r3, [pc, #456]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a71      	ldr	r2, [pc, #452]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	4b6f      	ldr	r3, [pc, #444]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a6e      	ldr	r2, [pc, #440]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e00b      	b.n	80012c0 <HAL_RCC_OscConfig+0xd4>
 80012a8:	4b6b      	ldr	r3, [pc, #428]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a6a      	ldr	r2, [pc, #424]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b68      	ldr	r3, [pc, #416]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a67      	ldr	r2, [pc, #412]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 80012ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d013      	beq.n	80012f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fcee 	bl	8000ca8 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff fcea 	bl	8000ca8 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	; 0x64
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e1fa      	b.n	80016d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e2:	4b5d      	ldr	r3, [pc, #372]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0xe4>
 80012ee:	e014      	b.n	800131a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fcda 	bl	8000ca8 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fcd6 	bl	8000ca8 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e1e6      	b.n	80016d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130a:	4b53      	ldr	r3, [pc, #332]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x10c>
 8001316:	e000      	b.n	800131a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d063      	beq.n	80013ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001326:	4b4c      	ldr	r3, [pc, #304]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00b      	beq.n	800134a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001332:	4b49      	ldr	r3, [pc, #292]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b08      	cmp	r3, #8
 800133c:	d11c      	bne.n	8001378 <HAL_RCC_OscConfig+0x18c>
 800133e:	4b46      	ldr	r3, [pc, #280]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d116      	bne.n	8001378 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134a:	4b43      	ldr	r3, [pc, #268]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d005      	beq.n	8001362 <HAL_RCC_OscConfig+0x176>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d001      	beq.n	8001362 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e1ba      	b.n	80016d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001362:	4b3d      	ldr	r3, [pc, #244]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4939      	ldr	r1, [pc, #228]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001376:	e03a      	b.n	80013ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001380:	4b36      	ldr	r3, [pc, #216]	; (800145c <HAL_RCC_OscConfig+0x270>)
 8001382:	2201      	movs	r2, #1
 8001384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001386:	f7ff fc8f 	bl	8000ca8 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800138e:	f7ff fc8b 	bl	8000ca8 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e19b      	b.n	80016d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a0:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ac:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4927      	ldr	r1, [pc, #156]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	600b      	str	r3, [r1, #0]
 80013c0:	e015      	b.n	80013ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c2:	4b26      	ldr	r3, [pc, #152]	; (800145c <HAL_RCC_OscConfig+0x270>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff fc6e 	bl	8000ca8 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d0:	f7ff fc6a 	bl	8000ca8 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e17a      	b.n	80016d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d03a      	beq.n	8001470 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d019      	beq.n	8001436 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <HAL_RCC_OscConfig+0x274>)
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001408:	f7ff fc4e 	bl	8000ca8 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001410:	f7ff fc4a 	bl	8000ca8 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e15a      	b.n	80016d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <HAL_RCC_OscConfig+0x26c>)
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f000 fada 	bl	80019e8 <RCC_Delay>
 8001434:	e01c      	b.n	8001470 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_RCC_OscConfig+0x274>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143c:	f7ff fc34 	bl	8000ca8 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001442:	e00f      	b.n	8001464 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001444:	f7ff fc30 	bl	8000ca8 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d908      	bls.n	8001464 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e140      	b.n	80016d8 <HAL_RCC_OscConfig+0x4ec>
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000
 800145c:	42420000 	.word	0x42420000
 8001460:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001464:	4b9e      	ldr	r3, [pc, #632]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1e9      	bne.n	8001444 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 80a6 	beq.w	80015ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001482:	4b97      	ldr	r3, [pc, #604]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10d      	bne.n	80014aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	4b94      	ldr	r3, [pc, #592]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	4a93      	ldr	r2, [pc, #588]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	61d3      	str	r3, [r2, #28]
 800149a:	4b91      	ldr	r3, [pc, #580]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014a6:	2301      	movs	r3, #1
 80014a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014aa:	4b8e      	ldr	r3, [pc, #568]	; (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d118      	bne.n	80014e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014b6:	4b8b      	ldr	r3, [pc, #556]	; (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a8a      	ldr	r2, [pc, #552]	; (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 80014bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c2:	f7ff fbf1 	bl	8000ca8 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ca:	f7ff fbed 	bl	8000ca8 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b64      	cmp	r3, #100	; 0x64
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e0fd      	b.n	80016d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014dc:	4b81      	ldr	r3, [pc, #516]	; (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d106      	bne.n	80014fe <HAL_RCC_OscConfig+0x312>
 80014f0:	4b7b      	ldr	r3, [pc, #492]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	4a7a      	ldr	r2, [pc, #488]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6213      	str	r3, [r2, #32]
 80014fc:	e02d      	b.n	800155a <HAL_RCC_OscConfig+0x36e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10c      	bne.n	8001520 <HAL_RCC_OscConfig+0x334>
 8001506:	4b76      	ldr	r3, [pc, #472]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	4a75      	ldr	r2, [pc, #468]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	6213      	str	r3, [r2, #32]
 8001512:	4b73      	ldr	r3, [pc, #460]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	4a72      	ldr	r2, [pc, #456]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 8001518:	f023 0304 	bic.w	r3, r3, #4
 800151c:	6213      	str	r3, [r2, #32]
 800151e:	e01c      	b.n	800155a <HAL_RCC_OscConfig+0x36e>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b05      	cmp	r3, #5
 8001526:	d10c      	bne.n	8001542 <HAL_RCC_OscConfig+0x356>
 8001528:	4b6d      	ldr	r3, [pc, #436]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4a6c      	ldr	r2, [pc, #432]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6213      	str	r3, [r2, #32]
 8001534:	4b6a      	ldr	r3, [pc, #424]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	4a69      	ldr	r2, [pc, #420]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6213      	str	r3, [r2, #32]
 8001540:	e00b      	b.n	800155a <HAL_RCC_OscConfig+0x36e>
 8001542:	4b67      	ldr	r3, [pc, #412]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4a66      	ldr	r2, [pc, #408]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	6213      	str	r3, [r2, #32]
 800154e:	4b64      	ldr	r3, [pc, #400]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	4a63      	ldr	r2, [pc, #396]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 8001554:	f023 0304 	bic.w	r3, r3, #4
 8001558:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d015      	beq.n	800158e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001562:	f7ff fba1 	bl	8000ca8 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001568:	e00a      	b.n	8001580 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156a:	f7ff fb9d 	bl	8000ca8 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	f241 3288 	movw	r2, #5000	; 0x1388
 8001578:	4293      	cmp	r3, r2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e0ab      	b.n	80016d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001580:	4b57      	ldr	r3, [pc, #348]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0ee      	beq.n	800156a <HAL_RCC_OscConfig+0x37e>
 800158c:	e014      	b.n	80015b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158e:	f7ff fb8b 	bl	8000ca8 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001594:	e00a      	b.n	80015ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001596:	f7ff fb87 	bl	8000ca8 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e095      	b.n	80016d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ac:	4b4c      	ldr	r3, [pc, #304]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1ee      	bne.n	8001596 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d105      	bne.n	80015ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015be:	4b48      	ldr	r3, [pc, #288]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	4a47      	ldr	r2, [pc, #284]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 80015c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 8081 	beq.w	80016d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d4:	4b42      	ldr	r3, [pc, #264]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d061      	beq.n	80016a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d146      	bne.n	8001676 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e8:	4b3f      	ldr	r3, [pc, #252]	; (80016e8 <HAL_RCC_OscConfig+0x4fc>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ee:	f7ff fb5b 	bl	8000ca8 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f6:	f7ff fb57 	bl	8000ca8 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e067      	b.n	80016d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001608:	4b35      	ldr	r3, [pc, #212]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f0      	bne.n	80015f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800161c:	d108      	bne.n	8001630 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800161e:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	492d      	ldr	r1, [pc, #180]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001630:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a19      	ldr	r1, [r3, #32]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	430b      	orrs	r3, r1
 8001642:	4927      	ldr	r1, [pc, #156]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 8001644:	4313      	orrs	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001648:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <HAL_RCC_OscConfig+0x4fc>)
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164e:	f7ff fb2b 	bl	8000ca8 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001656:	f7ff fb27 	bl	8000ca8 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e037      	b.n	80016d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001668:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x46a>
 8001674:	e02f      	b.n	80016d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <HAL_RCC_OscConfig+0x4fc>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fb14 	bl	8000ca8 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff fb10 	bl	8000ca8 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e020      	b.n	80016d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001696:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x498>
 80016a2:	e018      	b.n	80016d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d101      	bne.n	80016b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e013      	b.n	80016d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_RCC_OscConfig+0x4f4>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d106      	bne.n	80016d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40007000 	.word	0x40007000
 80016e8:	42420060 	.word	0x42420060

080016ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0d0      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001700:	4b6a      	ldr	r3, [pc, #424]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d910      	bls.n	8001730 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 0207 	bic.w	r2, r3, #7
 8001716:	4965      	ldr	r1, [pc, #404]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	4b63      	ldr	r3, [pc, #396]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0b8      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001748:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4a58      	ldr	r2, [pc, #352]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800174e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001752:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001760:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4a52      	ldr	r2, [pc, #328]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001766:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800176a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176c:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	494d      	ldr	r1, [pc, #308]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	4313      	orrs	r3, r2
 800177c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d040      	beq.n	800180c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d115      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e07f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d107      	bne.n	80017ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017aa:	4b41      	ldr	r3, [pc, #260]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d109      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e073      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ba:	4b3d      	ldr	r3, [pc, #244]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e06b      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ca:	4b39      	ldr	r3, [pc, #228]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f023 0203 	bic.w	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4936      	ldr	r1, [pc, #216]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017dc:	f7ff fa64 	bl	8000ca8 <HAL_GetTick>
 80017e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e2:	e00a      	b.n	80017fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e4:	f7ff fa60 	bl	8000ca8 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e053      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fa:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 020c 	and.w	r2, r3, #12
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	429a      	cmp	r2, r3
 800180a:	d1eb      	bne.n	80017e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d210      	bcs.n	800183c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b24      	ldr	r3, [pc, #144]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 0207 	bic.w	r2, r3, #7
 8001822:	4922      	ldr	r1, [pc, #136]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e032      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d008      	beq.n	800185a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4916      	ldr	r1, [pc, #88]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	4313      	orrs	r3, r2
 8001858:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	490e      	ldr	r1, [pc, #56]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	4313      	orrs	r3, r2
 8001878:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800187a:	f000 f821 	bl	80018c0 <HAL_RCC_GetSysClockFreq>
 800187e:	4601      	mov	r1, r0
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <HAL_RCC_ClockConfig+0x1c8>)
 800188c:	5cd3      	ldrb	r3, [r2, r3]
 800188e:	fa21 f303 	lsr.w	r3, r1, r3
 8001892:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_RCC_ClockConfig+0x1d0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff f9c2 	bl	8000c24 <HAL_InitTick>

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40022000 	.word	0x40022000
 80018b0:	40021000 	.word	0x40021000
 80018b4:	080027c4 	.word	0x080027c4
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000008 	.word	0x20000008

080018c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c0:	b490      	push	{r4, r7}
 80018c2:	b08a      	sub	sp, #40	; 0x28
 80018c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018c6:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018c8:	1d3c      	adds	r4, r7, #4
 80018ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018d0:	4b28      	ldr	r3, [pc, #160]	; (8001974 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018ea:	4b23      	ldr	r3, [pc, #140]	; (8001978 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d002      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0x40>
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d003      	beq.n	8001906 <HAL_RCC_GetSysClockFreq+0x46>
 80018fe:	e02d      	b.n	800195c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001900:	4b1e      	ldr	r3, [pc, #120]	; (800197c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001902:	623b      	str	r3, [r7, #32]
      break;
 8001904:	e02d      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	0c9b      	lsrs	r3, r3, #18
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001912:	4413      	add	r3, r2
 8001914:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001918:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d013      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	0c5b      	lsrs	r3, r3, #17
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001932:	4413      	add	r3, r2
 8001934:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001938:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	4a0f      	ldr	r2, [pc, #60]	; (800197c <HAL_RCC_GetSysClockFreq+0xbc>)
 800193e:	fb02 f203 	mul.w	r2, r2, r3
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	fbb2 f3f3 	udiv	r3, r2, r3
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
 800194a:	e004      	b.n	8001956 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001950:	fb02 f303 	mul.w	r3, r2, r3
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	623b      	str	r3, [r7, #32]
      break;
 800195a:	e002      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <HAL_RCC_GetSysClockFreq+0xbc>)
 800195e:	623b      	str	r3, [r7, #32]
      break;
 8001960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001962:	6a3b      	ldr	r3, [r7, #32]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3728      	adds	r7, #40	; 0x28
 8001968:	46bd      	mov	sp, r7
 800196a:	bc90      	pop	{r4, r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	080027b0 	.word	0x080027b0
 8001974:	080027c0 	.word	0x080027c0
 8001978:	40021000 	.word	0x40021000
 800197c:	007a1200 	.word	0x007a1200
 8001980:	003d0900 	.word	0x003d0900

08001984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001988:	4b02      	ldr	r3, [pc, #8]	; (8001994 <HAL_RCC_GetHCLKFreq+0x10>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	20000000 	.word	0x20000000

08001998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800199c:	f7ff fff2 	bl	8001984 <HAL_RCC_GetHCLKFreq>
 80019a0:	4601      	mov	r1, r0
 80019a2:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	0a1b      	lsrs	r3, r3, #8
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	4a03      	ldr	r2, [pc, #12]	; (80019bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ae:	5cd3      	ldrb	r3, [r2, r3]
 80019b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000
 80019bc:	080027d4 	.word	0x080027d4

080019c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019c4:	f7ff ffde 	bl	8001984 <HAL_RCC_GetHCLKFreq>
 80019c8:	4601      	mov	r1, r0
 80019ca:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	0adb      	lsrs	r3, r3, #11
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	4a03      	ldr	r2, [pc, #12]	; (80019e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019d6:	5cd3      	ldrb	r3, [r2, r3]
 80019d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019dc:	4618      	mov	r0, r3
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40021000 	.word	0x40021000
 80019e4:	080027d4 	.word	0x080027d4

080019e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <RCC_Delay+0x34>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <RCC_Delay+0x38>)
 80019f6:	fba2 2303 	umull	r2, r3, r2, r3
 80019fa:	0a5b      	lsrs	r3, r3, #9
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	fb02 f303 	mul.w	r3, r2, r3
 8001a02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a04:	bf00      	nop
  }
  while (Delay --);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1e5a      	subs	r2, r3, #1
 8001a0a:	60fa      	str	r2, [r7, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f9      	bne.n	8001a04 <RCC_Delay+0x1c>
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	10624dd3 	.word	0x10624dd3

08001a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e01d      	b.n	8001a72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d106      	bne.n	8001a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7fe fcf6 	bl	800043c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2202      	movs	r2, #2
 8001a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3304      	adds	r3, #4
 8001a60:	4619      	mov	r1, r3
 8001a62:	4610      	mov	r0, r2
 8001a64:	f000 fa18 	bl	8001e98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b085      	sub	sp, #20
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 0201 	orr.w	r2, r2, #1
 8001a90:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2b06      	cmp	r3, #6
 8001aa2:	d007      	beq.n	8001ab4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0201 	orr.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d122      	bne.n	8001b1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d11b      	bne.n	8001b1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f06f 0202 	mvn.w	r2, #2
 8001aec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f9ad 	bl	8001e62 <HAL_TIM_IC_CaptureCallback>
 8001b08:	e005      	b.n	8001b16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f9a0 	bl	8001e50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f9af 	bl	8001e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d122      	bne.n	8001b70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d11b      	bne.n	8001b70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f06f 0204 	mvn.w	r2, #4
 8001b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2202      	movs	r2, #2
 8001b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f983 	bl	8001e62 <HAL_TIM_IC_CaptureCallback>
 8001b5c:	e005      	b.n	8001b6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f976 	bl	8001e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f985 	bl	8001e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d122      	bne.n	8001bc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d11b      	bne.n	8001bc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f06f 0208 	mvn.w	r2, #8
 8001b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2204      	movs	r2, #4
 8001b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f959 	bl	8001e62 <HAL_TIM_IC_CaptureCallback>
 8001bb0:	e005      	b.n	8001bbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f94c 	bl	8001e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f95b 	bl	8001e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	f003 0310 	and.w	r3, r3, #16
 8001bce:	2b10      	cmp	r3, #16
 8001bd0:	d122      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b10      	cmp	r3, #16
 8001bde:	d11b      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f06f 0210 	mvn.w	r2, #16
 8001be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2208      	movs	r2, #8
 8001bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f92f 	bl	8001e62 <HAL_TIM_IC_CaptureCallback>
 8001c04:	e005      	b.n	8001c12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f922 	bl	8001e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f931 	bl	8001e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d10e      	bne.n	8001c44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d107      	bne.n	8001c44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f06f 0201 	mvn.w	r2, #1
 8001c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f8fd 	bl	8001e3e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4e:	2b80      	cmp	r3, #128	; 0x80
 8001c50:	d10e      	bne.n	8001c70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5c:	2b80      	cmp	r3, #128	; 0x80
 8001c5e:	d107      	bne.n	8001c70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 fa59 	bl	8002122 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7a:	2b40      	cmp	r3, #64	; 0x40
 8001c7c:	d10e      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c88:	2b40      	cmp	r3, #64	; 0x40
 8001c8a:	d107      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f8f5 	bl	8001e86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f003 0320 	and.w	r3, r3, #32
 8001ca6:	2b20      	cmp	r3, #32
 8001ca8:	d10e      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f003 0320 	and.w	r3, r3, #32
 8001cb4:	2b20      	cmp	r3, #32
 8001cb6:	d107      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0220 	mvn.w	r2, #32
 8001cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 fa24 	bl	8002110 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_TIM_ConfigClockSource+0x18>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e0a6      	b.n	8001e36 <HAL_TIM_ConfigClockSource+0x166>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b40      	cmp	r3, #64	; 0x40
 8001d1e:	d067      	beq.n	8001df0 <HAL_TIM_ConfigClockSource+0x120>
 8001d20:	2b40      	cmp	r3, #64	; 0x40
 8001d22:	d80b      	bhi.n	8001d3c <HAL_TIM_ConfigClockSource+0x6c>
 8001d24:	2b10      	cmp	r3, #16
 8001d26:	d073      	beq.n	8001e10 <HAL_TIM_ConfigClockSource+0x140>
 8001d28:	2b10      	cmp	r3, #16
 8001d2a:	d802      	bhi.n	8001d32 <HAL_TIM_ConfigClockSource+0x62>
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d06f      	beq.n	8001e10 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001d30:	e078      	b.n	8001e24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001d32:	2b20      	cmp	r3, #32
 8001d34:	d06c      	beq.n	8001e10 <HAL_TIM_ConfigClockSource+0x140>
 8001d36:	2b30      	cmp	r3, #48	; 0x30
 8001d38:	d06a      	beq.n	8001e10 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001d3a:	e073      	b.n	8001e24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001d3c:	2b70      	cmp	r3, #112	; 0x70
 8001d3e:	d00d      	beq.n	8001d5c <HAL_TIM_ConfigClockSource+0x8c>
 8001d40:	2b70      	cmp	r3, #112	; 0x70
 8001d42:	d804      	bhi.n	8001d4e <HAL_TIM_ConfigClockSource+0x7e>
 8001d44:	2b50      	cmp	r3, #80	; 0x50
 8001d46:	d033      	beq.n	8001db0 <HAL_TIM_ConfigClockSource+0xe0>
 8001d48:	2b60      	cmp	r3, #96	; 0x60
 8001d4a:	d041      	beq.n	8001dd0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001d4c:	e06a      	b.n	8001e24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d52:	d066      	beq.n	8001e22 <HAL_TIM_ConfigClockSource+0x152>
 8001d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d58:	d017      	beq.n	8001d8a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001d5a:	e063      	b.n	8001e24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6818      	ldr	r0, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	6899      	ldr	r1, [r3, #8]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f000 f96d 	bl	800204a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001d7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	609a      	str	r2, [r3, #8]
      break;
 8001d88:	e04c      	b.n	8001e24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	6899      	ldr	r1, [r3, #8]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f000 f956 	bl	800204a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dac:	609a      	str	r2, [r3, #8]
      break;
 8001dae:	e039      	b.n	8001e24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	6859      	ldr	r1, [r3, #4]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	f000 f8cd 	bl	8001f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2150      	movs	r1, #80	; 0x50
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 f924 	bl	8002016 <TIM_ITRx_SetConfig>
      break;
 8001dce:	e029      	b.n	8001e24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	6859      	ldr	r1, [r3, #4]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	f000 f8eb 	bl	8001fb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2160      	movs	r1, #96	; 0x60
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 f914 	bl	8002016 <TIM_ITRx_SetConfig>
      break;
 8001dee:	e019      	b.n	8001e24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f000 f8ad 	bl	8001f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2140      	movs	r1, #64	; 0x40
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 f904 	bl	8002016 <TIM_ITRx_SetConfig>
      break;
 8001e0e:	e009      	b.n	8001e24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	f000 f8fb 	bl	8002016 <TIM_ITRx_SetConfig>
      break;
 8001e20:	e000      	b.n	8001e24 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001e22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr

08001e62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a29      	ldr	r2, [pc, #164]	; (8001f50 <TIM_Base_SetConfig+0xb8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d00b      	beq.n	8001ec8 <TIM_Base_SetConfig+0x30>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb6:	d007      	beq.n	8001ec8 <TIM_Base_SetConfig+0x30>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a26      	ldr	r2, [pc, #152]	; (8001f54 <TIM_Base_SetConfig+0xbc>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d003      	beq.n	8001ec8 <TIM_Base_SetConfig+0x30>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a25      	ldr	r2, [pc, #148]	; (8001f58 <TIM_Base_SetConfig+0xc0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d108      	bne.n	8001eda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <TIM_Base_SetConfig+0xb8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00b      	beq.n	8001efa <TIM_Base_SetConfig+0x62>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee8:	d007      	beq.n	8001efa <TIM_Base_SetConfig+0x62>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a19      	ldr	r2, [pc, #100]	; (8001f54 <TIM_Base_SetConfig+0xbc>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d003      	beq.n	8001efa <TIM_Base_SetConfig+0x62>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a18      	ldr	r2, [pc, #96]	; (8001f58 <TIM_Base_SetConfig+0xc0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d108      	bne.n	8001f0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <TIM_Base_SetConfig+0xb8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d103      	bne.n	8001f40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	615a      	str	r2, [r3, #20]
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	40012c00 	.word	0x40012c00
 8001f54:	40000400 	.word	0x40000400
 8001f58:	40000800 	.word	0x40000800

08001f5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	f023 0201 	bic.w	r2, r3, #1
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f023 030a 	bic.w	r3, r3, #10
 8001f98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	621a      	str	r2, [r3, #32]
}
 8001fae:	bf00      	nop
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f023 0210 	bic.w	r2, r3, #16
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001fe2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	031b      	lsls	r3, r3, #12
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001ff4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	621a      	str	r2, [r3, #32]
}
 800200c:	bf00      	nop
 800200e:	371c      	adds	r7, #28
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002016:	b480      	push	{r7}
 8002018:	b085      	sub	sp, #20
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	f043 0307 	orr.w	r3, r3, #7
 8002038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	609a      	str	r2, [r3, #8]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr

0800204a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800204a:	b480      	push	{r7}
 800204c:	b087      	sub	sp, #28
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002064:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	021a      	lsls	r2, r3, #8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	431a      	orrs	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	4313      	orrs	r3, r2
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	4313      	orrs	r3, r2
 8002076:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	609a      	str	r2, [r3, #8]
}
 800207e:	bf00      	nop
 8002080:	371c      	adds	r7, #28
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800209c:	2302      	movs	r3, #2
 800209e:	e032      	b.n	8002106 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020d8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e03f      	b.n	80021c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7fe f992 	bl	8000484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2224      	movs	r2, #36	; 0x24
 8002164:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002176:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f90b 	bl	8002394 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800218c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695a      	ldr	r2, [r3, #20]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800219c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2220      	movs	r2, #32
 80021b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b088      	sub	sp, #32
 80021d2:	af02      	add	r7, sp, #8
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	603b      	str	r3, [r7, #0]
 80021da:	4613      	mov	r3, r2
 80021dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	f040 8083 	bne.w	80022f6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d002      	beq.n	80021fc <HAL_UART_Transmit+0x2e>
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e07b      	b.n	80022f8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_UART_Transmit+0x40>
 800220a:	2302      	movs	r3, #2
 800220c:	e074      	b.n	80022f8 <HAL_UART_Transmit+0x12a>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2221      	movs	r2, #33	; 0x21
 8002220:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002224:	f7fe fd40 	bl	8000ca8 <HAL_GetTick>
 8002228:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	88fa      	ldrh	r2, [r7, #6]
 800222e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	88fa      	ldrh	r2, [r7, #6]
 8002234:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002236:	e042      	b.n	80022be <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800223c:	b29b      	uxth	r3, r3
 800223e:	3b01      	subs	r3, #1
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800224e:	d122      	bne.n	8002296 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2200      	movs	r2, #0
 8002258:	2180      	movs	r1, #128	; 0x80
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 f850 	bl	8002300 <UART_WaitOnFlagUntilTimeout>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e046      	b.n	80022f8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800227c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	3302      	adds	r3, #2
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	e017      	b.n	80022be <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	3301      	adds	r3, #1
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	e013      	b.n	80022be <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2200      	movs	r2, #0
 800229e:	2180      	movs	r1, #128	; 0x80
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f82d 	bl	8002300 <UART_WaitOnFlagUntilTimeout>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e023      	b.n	80022f8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	60ba      	str	r2, [r7, #8]
 80022b6:	781a      	ldrb	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1b7      	bne.n	8002238 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2200      	movs	r2, #0
 80022d0:	2140      	movs	r1, #64	; 0x40
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 f814 	bl	8002300 <UART_WaitOnFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e00a      	b.n	80022f8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	e000      	b.n	80022f8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80022f6:	2302      	movs	r3, #2
  }
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	4613      	mov	r3, r2
 800230e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002310:	e02c      	b.n	800236c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002318:	d028      	beq.n	800236c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d007      	beq.n	8002330 <UART_WaitOnFlagUntilTimeout+0x30>
 8002320:	f7fe fcc2 	bl	8000ca8 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	429a      	cmp	r2, r3
 800232e:	d21d      	bcs.n	800236c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800233e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695a      	ldr	r2, [r3, #20]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e00f      	b.n	800238c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	4013      	ands	r3, r2
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	429a      	cmp	r2, r3
 800237a:	bf0c      	ite	eq
 800237c:	2301      	moveq	r3, #1
 800237e:	2300      	movne	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	429a      	cmp	r2, r3
 8002388:	d0c3      	beq.n	8002312 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80023ce:	f023 030c 	bic.w	r3, r3, #12
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	68f9      	ldr	r1, [r7, #12]
 80023d8:	430b      	orrs	r3, r1
 80023da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699a      	ldr	r2, [r3, #24]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a52      	ldr	r2, [pc, #328]	; (8002540 <UART_SetConfig+0x1ac>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d14e      	bne.n	800249a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023fc:	f7ff fae0 	bl	80019c0 <HAL_RCC_GetPCLK2Freq>
 8002400:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	009a      	lsls	r2, r3, #2
 800240c:	441a      	add	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	fbb2 f3f3 	udiv	r3, r2, r3
 8002418:	4a4a      	ldr	r2, [pc, #296]	; (8002544 <UART_SetConfig+0x1b0>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	0119      	lsls	r1, r3, #4
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	009a      	lsls	r2, r3, #2
 800242c:	441a      	add	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	fbb2 f2f3 	udiv	r2, r2, r3
 8002438:	4b42      	ldr	r3, [pc, #264]	; (8002544 <UART_SetConfig+0x1b0>)
 800243a:	fba3 0302 	umull	r0, r3, r3, r2
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	2064      	movs	r0, #100	; 0x64
 8002442:	fb00 f303 	mul.w	r3, r0, r3
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	3332      	adds	r3, #50	; 0x32
 800244c:	4a3d      	ldr	r2, [pc, #244]	; (8002544 <UART_SetConfig+0x1b0>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002458:	4419      	add	r1, r3
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	009a      	lsls	r2, r3, #2
 8002464:	441a      	add	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002470:	4b34      	ldr	r3, [pc, #208]	; (8002544 <UART_SetConfig+0x1b0>)
 8002472:	fba3 0302 	umull	r0, r3, r3, r2
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	2064      	movs	r0, #100	; 0x64
 800247a:	fb00 f303 	mul.w	r3, r0, r3
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	3332      	adds	r3, #50	; 0x32
 8002484:	4a2f      	ldr	r2, [pc, #188]	; (8002544 <UART_SetConfig+0x1b0>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	f003 020f 	and.w	r2, r3, #15
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	440a      	add	r2, r1
 8002496:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002498:	e04d      	b.n	8002536 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800249a:	f7ff fa7d 	bl	8001998 <HAL_RCC_GetPCLK1Freq>
 800249e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	009a      	lsls	r2, r3, #2
 80024aa:	441a      	add	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b6:	4a23      	ldr	r2, [pc, #140]	; (8002544 <UART_SetConfig+0x1b0>)
 80024b8:	fba2 2303 	umull	r2, r3, r2, r3
 80024bc:	095b      	lsrs	r3, r3, #5
 80024be:	0119      	lsls	r1, r3, #4
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	009a      	lsls	r2, r3, #2
 80024ca:	441a      	add	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80024d6:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <UART_SetConfig+0x1b0>)
 80024d8:	fba3 0302 	umull	r0, r3, r3, r2
 80024dc:	095b      	lsrs	r3, r3, #5
 80024de:	2064      	movs	r0, #100	; 0x64
 80024e0:	fb00 f303 	mul.w	r3, r0, r3
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	3332      	adds	r3, #50	; 0x32
 80024ea:	4a16      	ldr	r2, [pc, #88]	; (8002544 <UART_SetConfig+0x1b0>)
 80024ec:	fba2 2303 	umull	r2, r3, r2, r3
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024f6:	4419      	add	r1, r3
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	009a      	lsls	r2, r3, #2
 8002502:	441a      	add	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	fbb2 f2f3 	udiv	r2, r2, r3
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <UART_SetConfig+0x1b0>)
 8002510:	fba3 0302 	umull	r0, r3, r3, r2
 8002514:	095b      	lsrs	r3, r3, #5
 8002516:	2064      	movs	r0, #100	; 0x64
 8002518:	fb00 f303 	mul.w	r3, r0, r3
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	3332      	adds	r3, #50	; 0x32
 8002522:	4a08      	ldr	r2, [pc, #32]	; (8002544 <UART_SetConfig+0x1b0>)
 8002524:	fba2 2303 	umull	r2, r3, r2, r3
 8002528:	095b      	lsrs	r3, r3, #5
 800252a:	f003 020f 	and.w	r2, r3, #15
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	440a      	add	r2, r1
 8002534:	609a      	str	r2, [r3, #8]
}
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40013800 	.word	0x40013800
 8002544:	51eb851f 	.word	0x51eb851f

08002548 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002548:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800254a:	e003      	b.n	8002554 <LoopCopyDataInit>

0800254c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800254e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002550:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002552:	3104      	adds	r1, #4

08002554 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002554:	480a      	ldr	r0, [pc, #40]	; (8002580 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002558:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800255a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800255c:	d3f6      	bcc.n	800254c <CopyDataInit>
  ldr r2, =_sbss
 800255e:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002560:	e002      	b.n	8002568 <LoopFillZerobss>

08002562 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002562:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002564:	f842 3b04 	str.w	r3, [r2], #4

08002568 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002568:	4b08      	ldr	r3, [pc, #32]	; (800258c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800256a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800256c:	d3f9      	bcc.n	8002562 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800256e:	f7fe f80b 	bl	8000588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002572:	f000 f80f 	bl	8002594 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002576:	f7fd fdf1 	bl	800015c <main>
  bx lr
 800257a:	4770      	bx	lr
  ldr r3, =_sidata
 800257c:	080027e4 	.word	0x080027e4
  ldr r0, =_sdata
 8002580:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002584:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8002588:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 800258c:	200000c0 	.word	0x200000c0

08002590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002590:	e7fe      	b.n	8002590 <ADC1_2_IRQHandler>
	...

08002594 <__libc_init_array>:
 8002594:	b570      	push	{r4, r5, r6, lr}
 8002596:	2500      	movs	r5, #0
 8002598:	4e0c      	ldr	r6, [pc, #48]	; (80025cc <__libc_init_array+0x38>)
 800259a:	4c0d      	ldr	r4, [pc, #52]	; (80025d0 <__libc_init_array+0x3c>)
 800259c:	1ba4      	subs	r4, r4, r6
 800259e:	10a4      	asrs	r4, r4, #2
 80025a0:	42a5      	cmp	r5, r4
 80025a2:	d109      	bne.n	80025b8 <__libc_init_array+0x24>
 80025a4:	f000 f822 	bl	80025ec <_init>
 80025a8:	2500      	movs	r5, #0
 80025aa:	4e0a      	ldr	r6, [pc, #40]	; (80025d4 <__libc_init_array+0x40>)
 80025ac:	4c0a      	ldr	r4, [pc, #40]	; (80025d8 <__libc_init_array+0x44>)
 80025ae:	1ba4      	subs	r4, r4, r6
 80025b0:	10a4      	asrs	r4, r4, #2
 80025b2:	42a5      	cmp	r5, r4
 80025b4:	d105      	bne.n	80025c2 <__libc_init_array+0x2e>
 80025b6:	bd70      	pop	{r4, r5, r6, pc}
 80025b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025bc:	4798      	blx	r3
 80025be:	3501      	adds	r5, #1
 80025c0:	e7ee      	b.n	80025a0 <__libc_init_array+0xc>
 80025c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025c6:	4798      	blx	r3
 80025c8:	3501      	adds	r5, #1
 80025ca:	e7f2      	b.n	80025b2 <__libc_init_array+0x1e>
 80025cc:	080027dc 	.word	0x080027dc
 80025d0:	080027dc 	.word	0x080027dc
 80025d4:	080027dc 	.word	0x080027dc
 80025d8:	080027e0 	.word	0x080027e0

080025dc <memset>:
 80025dc:	4603      	mov	r3, r0
 80025de:	4402      	add	r2, r0
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d100      	bne.n	80025e6 <memset+0xa>
 80025e4:	4770      	bx	lr
 80025e6:	f803 1b01 	strb.w	r1, [r3], #1
 80025ea:	e7f9      	b.n	80025e0 <memset+0x4>

080025ec <_init>:
 80025ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ee:	bf00      	nop
 80025f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025f2:	bc08      	pop	{r3}
 80025f4:	469e      	mov	lr, r3
 80025f6:	4770      	bx	lr

080025f8 <_fini>:
 80025f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fa:	bf00      	nop
 80025fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025fe:	bc08      	pop	{r3}
 8002600:	469e      	mov	lr, r3
 8002602:	4770      	bx	lr
